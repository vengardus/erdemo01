'''
created by edgard.ramos (ismytv@gmail.com)
generated by alice.bash.v.2203a
jue 11 ago 2022 23:23:49 -05
'''
#from logging import NullHandler
from base.libs.table import Table
from base import config as PARAMS
from base.models import CaInvDet
#from base.business.bcainvcab import BCaInvCab
from base.business.bproducto import BProducto
from base.choices import EstadoInventarioChoices


class BCaInvDet(Table):
    aMessage = []           # lista de mensajes

    def __init__(self):
        self.TO = CaInvDet
        self.message_tablename = self.TO._meta.verbose_name
        self.aMessage = []

    def get_aTO_toArray(self):
        array = list()
        for oTO in self.aTO:
            array.append(self.get_oTO_toDict(oTO))
        return array
    
    def get_oTO_toDict(self, oTO:CaInvDet):
        # acá se genera diccionario con los atributos a retornar

        
        #print('COUNT', oTO.cainvdets.count)}

        #x = oTO.cainvdets.all().count()
        #for i in list(x):
        #    print('X', i.id, i.ca_inv_det_id, i.ns_conteo)
        #print('COUNT', x)

        is_inv_open = True if oTO.ca_inv_cab.estado_inventario == EstadoInventarioChoices.opened else False
        s_categoria = oTO.producto.s_categoria if is_inv_open else oTO.s_categoria
        s_categoria = s_categoria if s_categoria else ''

        return {
            'id':oTO.id,
            
            's_codigo': oTO.producto.s_codigo if is_inv_open else oTO.s_codigo,
            's_descripcion': oTO.producto.s_descripcion if is_inv_open else oTO.s_descripcion,
            's_categoria': s_categoria,
            'unidad_medida_s_codigo': oTO.unidad_medida.s_codigo if is_inv_open else oTO.unidad_medida_s_codigo,
            'unidad_medida_s_descripcion': oTO.unidad_medida.s_descripcion if is_inv_open else oTO.unidad_medida_s_codigo,
          
            's_cod_barra': oTO.s_cod_barra,
            'n_stk_act': oTO.n_stk_act,
            'ns_conteo1': oTO.ns_conteo1,
            'ns_conteo2': oTO.ns_conteo2,
            'count_cainvdetu': oTO.cainvdets.all().count(),
        }

    ''' ----------------------
        Métodos personalizados
    '''
    def _set_oTO(self, oTO:CaInvDet, data:list(), mode, request):
        '''
            Personalizar oTO
        '''
        oTO.ca_inv_cab = data['ca_inv_cab']
        oTO.producto = data['producto']
        oTO.s_codigo = data['s_codigo']
        oTO.s_cod_barra = data['s_cod_barra']
        oTO.s_descripcion = data['s_descripcion']
        oTO.unidad_medida = data['unidad_medida']
        oTO.unidad_medida_s_codigo = data['unidad_medida_s_codigo']
        oTO.n_stk_act = data['n_stk_act']
        oTO.s_ubicacion = data['s_ubicacion']
        oTO.ns_conteo1 = data['ns_conteo1']
        oTO.ns_conteo2 = data['ns_conteo2']
        oTO.s_categoria = data['s_categoria']

        if mode != 'new':
            oTO.user_edit_id = request.user.id
        else:
            oTO.user_created_id = request.user.id
            oTO.license_id = request.user.license_id
        return oTO
    
    def validate(self, data:list()):
        self.aMessage = []
        return True

    def save(self, request, mode, id, data:list()):
        ok = False
        if mode == 'new' :
            oTO = self.TO()
            oTO = self._set_oTO(oTO, data, mode, request)
            ok = self.insert(oTO)
        
        else: # edit
            oTO = self.get(id)
            if oTO == None:
                self.message = f'No se encontro registro con id={id}'
                self.error_code = PARAMS.ErrorCode.not_found
            else:
                oTO = self._set_oTO(oTO, data, mode, request,)
                ok = self.update(oTO)
            
        return ok
    
    def get_all(self, license_id:int=None):
        if license_id == None:
            # self.aTO = self.TO.objects.all().order_by('desc')
            self.aTO = self.TO.objects.all()
        else:
            self.aTO = self.TO.objects.all().filter(license_id=license_id)
        return self.aTO

    def get_all_invcab(self, ca_inv_cab, license_id:int=None):
        if license_id == None:
            # self.aTO = self.TO.objects.all().order_by('desc')
            self.aTO = self.TO.objects.all().filter(ca_inv_cab=ca_inv_cab)
        else:
            self.aTO = self.TO.objects.all().filter(license_id=license_id, ca_inv_cab=ca_inv_cab)
        return self.aTO
    
    def get_item(self, ca_inv_cab_id, producto_codigo):
        aTO = self.TO.objects.all().filter(
            ca_inv_cab=ca_inv_cab_id, s_codigo=producto_codigo)
        if aTO:
            return aTO[0]
        return None

    