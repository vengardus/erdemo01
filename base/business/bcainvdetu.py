'''
created by edgard.ramos (ismytv@gmail.com)
generated by alice.bash.v.2203a
sáb 13 ago 2022 17:38:58 -05
'''
from django.db.models import Sum
from decimal import Decimal
from base.libs.table import Table
from base import config as PARAMS
from base.models import CaInvDetU


class BCaInvDetU(Table):
    aMessage = []           # lista de mensajes

    def __init__(self):
        self.TO = CaInvDetU
        self.message_tablename = self.TO._meta.verbose_name
        self.aMessage = []

    def get_aTO_toArray(self):
        array = list()
        for oTO in self.aTO:
            array.append(self.get_oTO_toDict(oTO))
        return array
    
    def get_oTO_toDict(self, oTO:CaInvDetU):
        # acá se genera diccionario con los atributos a retornar
        return {
            'id':oTO.id,
            'ca_inv_det_id':oTO.ca_inv_det.id,
            's_codigo':oTO.ca_inv_det.producto.s_codigo,
            's_descripcion':oTO.ca_inv_det.producto.s_descripcion,
            'id_conteo':oTO.id_conteo,
            's_ubicacion':oTO.s_ubicacion,
            'ns_conteo':oTO.ns_conteo,

        }

    ''' ----------------------
        Métodos personalizados
    '''
    def _set_oTO(self, oTO:CaInvDetU, data:list(), mode, request):
        '''
            Personalizar oTO
        '''
        print('UNO-0', data, mode)
        oTO.ca_inv_det = data['ca_inv_det']
        oTO.id_conteo = data['id_conteo']
        oTO.s_ubicacion = data['s_ubicacion']
        #oTO.ns_conteo = data['ns_conteo']

        if mode != 'new':
            oTO.ns_conteo += Decimal(data['ns_conteo'])
            if request != None:
                oTO.user_edit_id = request.user.id
            else:
                oTO.user_edit_id = data['user_created_id']

        else:
            oTO.ns_conteo = data['ns_conteo']
            if request != None:
                oTO.user_created_id = request.user.id
                oTO.license_id = request.user.license_id
            else:
                oTO.user_created_id = data['user_created_id']
                oTO.license_id = data['license_id']
        return oTO
    
    def validate(self, data:list()):
        self.aMessage = []
        return True

    def save(self, request, mode, id, data:list()):
        ok = False
        if mode == 'new' :
            oTO = self.TO()
            oTO = self._set_oTO(oTO, data, mode, request)
            ok = self.insert(oTO)
        
        else: # edit
            oTO = self.get(id)
            if oTO == None:
                self.message = f'No se encontro registro con id={id}'
                self.error_code = PARAMS.ErrorCode.not_found
            else:
                oTO = self._set_oTO(oTO, data, mode, request,)
                ok = self.update(oTO)
            
        return ok
    
    def get_all(self, license_id:int=None):
        if license_id == None:
            # self.aTO = self.TO.objects.all().order_by('desc')
            self.aTO = self.TO.objects.all()
        else:
            self.aTO = self.TO.objects.all().filter(license_id=license_id)
        return self.aTO

    def get_item(self, ca_inv_det_id, id_conteo, s_ubicacion):
        print('DATA', ca_inv_det_id, id_conteo, s_ubicacion)
        aTO = self.TO.objects.all().filter(
            ca_inv_det_id=ca_inv_det_id, 
            id_conteo=id_conteo,
            s_ubicacion=s_ubicacion)
        print('UNOI-X')
        print(aTO)
        if aTO:
            return aTO[0]
        return None

    def save_api(self, mode, id, data:list(), oTO=None):
        ok = False
        if mode == 'new' :
            oTO = self.TO()
            oTO = self._set_oTO(oTO, data, mode, None)
            ok = self.insert(oTO)
        
        else: # edit
            if oTO == None:
                oTO = self.get(id)
            
            if oTO == None:
                self.message = f'No se encontro registro con id={id}'
                self.error_code = PARAMS.ErrorCode.not_found
            else:
                oTO = self._set_oTO(oTO, data, mode, None)
                ok = self.update(oTO)
            
        return ok

    def get_all_parent(self, cainvdet_id, license_id:int=None):
        if license_id == None:
            # self.aTO = self.TO.objects.all().order_by('desc')
            self.aTO = self.TO.objects.all().filter(
                ca_inv_det__id=cainvdet_id)
        else:
            self.aTO = self.TO.objects.all().filter(
                license_id=license_id, ca_inv_det__id=cainvdet_id)
        return self.aTO

    def get_all_inv_ubi_conteo(self, cainvcab_id, s_ubicacion, id_conteo, license_id:int=None):
        if license_id == None:
            self.aTO = self.TO.objects.all().filter(
                ca_inv_det__ca_inv_cab__id=cainvcab_id,
                s_ubicacion=s_ubicacion,
                id_conteo=id_conteo,
                )
        else:
            self.aTO = self.TO.objects.all().filter(
                license_id=license_id, 
                ca_inv_det__ca_inv_cab__id=cainvcab_id,
                s_ubicacion=s_ubicacion,
                id_conteo=id_conteo
                )
        return self.aTO

    def get_all_ubi_group(self, cainvcab_id, license_id:int=None):
        if license_id == None:
            self.aTO = self.TO.objects.all() 
            print('1) aTO', self.aTO)

            self.aTO = self.TO.objects.all() \
                .filter(ca_inv_det__ca_inv_cab__id=cainvcab_id) \
                .values('s_ubicacion', 'id_conteo') \
                .annotate(ns_conteo=Sum('ns_conteo')) 
            print('aTODEtu', self.aTO)
        else:
            self.aTO = self.TO.objects.all().filter(
                license_id=license_id, 
                ca_inv_det__ca_inv_cab__id=cainvcab_id,
                )
        return self.aTO