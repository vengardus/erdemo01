'''
created by edgard.ramos (ismytv@gmail.com)
generated by alice.bash.v.2203a
jue 11 ago 2022 17:15:49 -05
'''
from decimal import Decimal
from django.db import transaction
from base.libs.table import Table
from base import config as PARAMS
from base.models import CaInvCab, CaInvDet
from base.choices import EstadoInventarioChoices
from base.business.bproducto import BProducto
from base.business.bcainvdet import BCaInvDet
from base.business.bcainvdetu import BCaInvDetU


class BCaInvCab(Table):
    aMessage = []           # lista de mensajes

    def __init__(self):
        self.TO = CaInvCab
        self.message_tablename = self.TO._meta.verbose_name
        self.aMessage = []

    def get_aTO_toArray(self):
        array = list()
        for oTO in self.aTO:
            array.append(self.get_oTO_toDict(oTO))
        return array
    
    def get_oTO_toDict(self, oTO):
        # acá se genera diccionario con los atributos a retornar
        return {
            'id':oTO.id,
            's_descripcion':oTO.s_descripcion,
            's_fecha_inicio':oTO.s_fecha_inicio,
            'estado_inventario': oTO.estado_inventario,
            'estado_inventario_desc':EstadoInventarioChoices.get_desc(oTO.estado_inventario),
            'empleado':oTO.empleado.s_nombre_completo,
        }

    ''' ----------------------
        Métodos personalizados
    '''
    def _set_oTO(self, oTO:CaInvCab, data:list(), mode, request):
        '''
            Personalizar oTO
        '''
        
        oTO.empleado = data['empleado']
        oTO.s_descripcion = data['s_descripcion']
        oTO.s_fecha_inicio = data['s_fecha_inicio']
        oTO.estado_inventario = data['estado_inventario']

        if mode != 'new':
            oTO.user_edit_id = request.user.id
        else:
            oTO.user_created_id = request.user.id
            oTO.license_id = request.user.license_id
        return oTO
    
    def validate(self, data:list()):
        self.aMessage = []
        return True

    def save(self, request, mode, id, data:list()):
        ok = False
        if mode == 'new' :
            ok = self.create_inventario(data, mode, request)
        
        else: # edit
            oTO = self.get(id)
            if oTO == None:
                self.message = f'No se encontro registro con id={id}'
                self.error_code = PARAMS.ErrorCode.not_found
            else:
                oTO = self._set_oTO(oTO, data, mode, request,)
                ok = self.update(oTO)
            
        return ok
    
    @transaction.atomic
    def create_inventario(self, data, mode, request):
        ok = False

        oTO = self.TO()
        oTO = self._set_oTO(oTO, data, mode, request)
        #insert cainvcab
        ok = self.insert(oTO)
        id = self.id
        print('ID:', id)
        print('oTO:', oTO.id, oTO.empleado, oTO.estado_inventario)
        

        #insert cainvdet
        print('Recorre Producto')
        oBCaInvDet = BCaInvDet()
        oBProducto = BProducto()
        aTOProducto = oBProducto.get_all(request.user.license_id)
        for oTOProducto in aTOProducto:
            print(oTOProducto)
            # insert cainvdet
            data = {
                'ca_inv_cab' : oTO,
                'producto' : oTOProducto,
                's_codigo' : oTOProducto.s_codigo,
                's_cod_barra': '',
                's_descripcion': oTOProducto.s_descripcion,
                'unidad_medida': oTOProducto.unidad_medida,
                'n_stk_act': 100,
                's_ubicacion': 'UNICA',
                'ns_conteo1' : 0,
                'ns_conteo2' : 0
            }
            oBCaInvDet.save(request, mode, 0, data)

        ok = True
        return ok

    
    def get_all(self, license_id:int=None):
        if license_id == None:
            # self.aTO = self.TO.objects.all().order_by('desc')
            self.aTO = self.TO.objects.all()
        else:
            self.aTO = self.TO.objects.all().filter(license_id=license_id)
        return self.aTO
    
    @transaction.atomic
    def add_item(self, ca_inv_cab_id, producto_codigo, s_ubicacion, cantidad, id_conteo=1):
        ok = False
        # validate id cabecera
        if self.get(ca_inv_cab_id) == None:
            self.message = 'Id de inventario no encontrado'
            return False

        # validate producto exista en ca_inv_det
        oBCabInvDet = BCaInvDet()
        oTOCaInvDet = oBCabInvDet.get_item(ca_inv_cab_id, producto_codigo)
        if oTOCaInvDet == None:
            self.message = 'Item no encontrado'
            return False
        
        # update ca_inv_det
        print('TYPE', type(cantidad))
        oTOCaInvDet.ns_conteo1 += Decimal(cantidad)
        print('UPDATE', oTOCaInvDet)
        oBCabInvDet.update(oTOCaInvDet)

        # update inv_ca_inv_detu
        data = {
            'ca_inv_det' : oTOCaInvDet,
            'id_conteo' : id_conteo,
            's_ubicacion': s_ubicacion,
            'ns_conteo': cantidad,

            'user_created_id': oTOCaInvDet.user_created_id,
            'license_id': oTOCaInvDet.license_id
        }

        print('UNO')
        oBCaInvDetU = BCaInvDetU()
        oTOCaInvDetU = oBCaInvDetU.get_item(oTOCaInvDet.id, id_conteo, s_ubicacion)
        print('DOS', oTOCaInvDetU)
        if oTOCaInvDetU == None:
            oBCaInvDetU.save_api('new', 0, data)
        else:
            oBCaInvDetU.save_api('edit', oTOCaInvDetU.id, data)
        print('TRES-OK')
        ok = True
        return ok