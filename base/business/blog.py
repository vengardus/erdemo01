'''
created by edgard.ramos (ismytv@gmail.com)
generated by alice.bash.v.2203a
jue 18 ago 2022 15:59:47 -05
'''
from base.libs.table import Table
from base import config as PARAMS
from base.models import Log


class BLog(Table):
    aMessage = []           # lista de mensajes

    def __init__(self):
        self.TO = Log
        self.message_tablename = self.TO._meta.verbose_name
        self.aMessage = []

    def get_aTO_toArray(self):
        array = list()
        for oTO in self.aTO:
            array.append(self.get_oTO_toDict(oTO))
        return array
    
    def get_oTO_toDict(self, oTO):
        # acá se genera diccionario con los atributos a retornar
        return {
            'id':oTO.id,
            'modulo':oTO.modulo,
            'accion':oTO.accion,
            'detalle':oTO.detalle,
        }

    ''' ----------------------
        Métodos personalizados
    '''
    def _set_oTO(self, oTO:Log, data:list(), mode, request:None):
        '''
            Personalizar oTO
        '''
        
        oTO.modulo = data['modulo']
        oTO.accion = data['accion']
        oTO.detalle = data['detalle']

        if mode != 'new':
            if request != None:
                oTO.user_edit_id = request.user.id
            else:
                oTO.user_edit_id = 1
        else:
            if request != None:
                oTO.user_created_id = request.user.id
                oTO.license_id = request.user.license_id
            else:
                oTO.user_created_id = 1
                oTO.license_id = 1
        return oTO
    
    def validate(self, data:list()):
        self.aMessage = []
        return True

    def save(self, request, mode, id, data:list()):
        ok = False
        
        data['detalle'] = f"{request.META['REMOTE_ADDR'].strip()};{request.META['SESSION_MANAGER'].strip()};{request.META['HTTP_USER_AGENT'].strip()}|"[:200]

        if mode == 'new' :
            oTO = self.TO()
            oTO = self._set_oTO(oTO, data, mode, request)
            ok = self.insert(oTO)
        
        else: # edit
            oTO = self.get(id)
            if oTO == None:
                self.message = f'No se encontro registro con id={id}'
                self.error_code = PARAMS.ErrorCode.not_found
            else:
                oTO = self._set_oTO(oTO, data, mode, request,)
                ok = self.update(oTO)
            
        return ok
    
    def get_all(self, license_id:int=None):
        if license_id == None:
            # self.aTO = self.TO.objects.all().order_by('desc')
            self.aTO = self.TO.objects.all()
        else:
            self.aTO = self.TO.objects.all().filter(license_id=license_id)
        return self.aTO
    
